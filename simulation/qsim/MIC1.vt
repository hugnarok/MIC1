// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2025 12:03:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIC1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIC1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg ENA;
reg ENB;
reg F0;
reg F1;
reg INVA;
reg Vem-um;
// wires                                               
wire Saida;
wire Vai-um;

// assign statements (if any)                          
MIC1 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.ENA(ENA),
	.ENB(ENB),
	.F0(F0),
	.F1(F1),
	.INVA(INVA),
	.Saida(Saida),
	.\Vai-um (Vai-um),
	.\Vem-um (Vem-um)
);
initial 
begin 
#2000000 $finish;
end 

// F0
initial
begin
	F0 = 1'b0;
	F0 = #800000 1'b1;
end 

// F1
initial
begin
	F1 = 1'b0;
	F1 = #400000 1'b1;
	F1 = #400000 1'b0;
	F1 = #400000 1'b1;
end 

// INVA
initial
begin
	INVA = 1'b0;
end 

// A
initial
begin
	A = 1'b0;
	A = #200000 1'b1;
	A = #200000 1'b0;
	A = #200000 1'b1;
	A = #200000 1'b0;
	A = #200000 1'b1;
	# 200000;
	repeat(2)
	begin
		A = 1'b0;
		A = #200000 1'b1;
		# 200000;
	end
end 

// B
initial
begin
	repeat(2)
	begin
		B = 1'b0;
		B = #100000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		B = 1'b0;
		B = #100000 1'b1;
		# 100000;
	end
	B = 1'b0;
	B = #100000 1'b1;
	B = #100000 1'b0;
	B = #100000 1'b1;
	# 100000;
	repeat(4)
	begin
		B = 1'b0;
		B = #100000 1'b1;
		# 100000;
	end
end 

// ENA
initial
begin
	ENA = 1'b1;
end 

// ENB
initial
begin
	ENB = 1'b1;
end 
initial 
begin 
#2000000 $finish;
end 
endmodule

